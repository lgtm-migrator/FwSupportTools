#!/bin/bash

# build-packages
#
# Example ./build-packages --main-package-name fieldworks \
#           --suite-name "keyboarding" \
#           --repository-committishes fwrepo/fw=origin/feature/Keyboarding,fwrepo/fw/DistFiles/Helps=origin/release/8.0 \
#           --dists "precise raring" \
#           --simulate-dput
#
# Original author: MarkS 2013-08-30 build-packages

set -e

PROGRAM_NAME="$(basename "$0")"

SCRIPTDIR="$(dirname "$0")"

stderr ()
{
	echo >&2 "$PROGRAM_NAME: $1"
}

# Process arguments.
while (( $# )); do
	case $1 in
		# Process individual arguments here. Use shift and $1 to get an argument value.
		# Example: -d) DEBUG=true ;;
		# Example: --outfile) shift; OUTFILE=$1 ;;
		# Example: *) echo "Unexpected argument: $1"; exit 1 ;;
		--debkeyid) shift; debkeyid=$1 ;;
		# Space-delimited list of releases. eg "precise raring"
		--dists) shift; dists_arg=$1 ;;
		# Space-delimited list of architectures. eg "amd64 i386"
		--arches) shift; arches_arg=$1 ;;
		# Comma-delimited list of non-default repositorydir=committish mapping (hash, tag, branch). eg "fwrepo/fw=2568e4f,fwrepo/fw/Localizations=linux/FieldWorks8.0.3-beta4,fwrepo/fw/DistFiles/Helps=origin/master"
		--repository-committishes) shift; repository_committishes_arg=$1 ;;
		# Don't upload packages at the end
		--simulate-dput) dput_simulate="-s" ;;
		--package-version-extension) shift; package_version_extension=".$1" ;;
		--suite-name) shift; suite_name=$1 ;;
		--main-package-name) shift; main_package_name_arg=$1 ;;
		# Skip cleaning and updating local repository
		--preserve-repository) preserve_repository_arg=true ;;
		# Space-delimited list of binary packages to remove from debian/control file before creating source package
		--omit-binary-packages) shift; omit_binary_packages_arg=$1 ;;
		# For making release packages. Do not add a new entry to the changelog. Package versions will be as specified in the last changelog entry, without a nightly timestamp appended.
		--preserve-changelog) preserve_changelog_arg=true ;;
		# Normally source and binary packages end up getting deleted during future runs of this script. If the source and binary packages from this run are to be kept around so they can be manually processed (eg to sign or upload to a different location), then this argument can be used.
		--preserve-products) preserve_products_arg=true ;;
		# Package repository to upload the resulting binary packages to. "llso-main" or "llso-experimental".
		--destination-repository) shift; destination_repository_arg=$1 ;;
		# Use this string as the automated package version extension. This will be appended to whatever the source tree's version number is determined to be. {BUILD_NUMBER} will be replaced with the Jenkins job number, or 0 if not running under Jenkins. {COMMIT_HASH} will be replaced with the number/hash of the most appropriate commit being used for building the package. Example: --automated-version-extension .{BUILD_NUMBER}.{COMMIT_HASH}
		--automated-version-extension) shift; automated_version_extension_arg=$1 ;;
		*) stderr "Error: Unexpected argument \"$1\". Exiting." ; exit 1 ;;
	esac
	shift || (stderr "Error: The last argument is missing a value. Exiting."; false) || exit 2
done

DISTRIBUTIONS_TO_PACKAGE="${dists_arg:-precise}"
ARCHES_TO_PACKAGE="${arches_arg:-i386 amd64}"
PACKAGING_ROOT="$HOME/packages"
MAIN_PACKAGE_NAME=$main_package_name_arg
PRESERVE_REPOSITORY=$preserve_repository_arg
OMIT_BINARY_PACKAGES_LIST="$omit_binary_packages_arg"
PRESERVE_CHANGELOG="$preserve_changelog_arg"
PRODUCTS_PRESERVATION_ROOT="$PACKAGING_ROOT/preserved-products"
PRODUCTS_PRESERVATION_PATH="$PRODUCTS_PRESERVATION_ROOT/$MAIN_PACKAGE_NAME"

[ -z "$MAIN_PACKAGE_NAME" ] && stderr "Error: --main-package-name not set." && exit 3
[ -n "$package_version_extension" -a -n "$preserve_changelog_arg" ] && stderr "Error: --package-version-extension and --preserve-changelog are incompatible." && exit 4

# If running as a jenkins job, clear out and later populate a results directory so artifacts can be kept if desired.
[ -n "$WORKSPACE" ] && ARTIFACT_RESULTS_PATH="$WORKSPACE/results"
[ -n "$ARTIFACT_RESULTS_PATH" ] && mkdir -p "$ARTIFACT_RESULTS_PATH"
[ -n "$ARTIFACT_RESULTS_PATH" ] && rm -f "$ARTIFACT_RESULTS_PATH"/*

# Where $1 is the repository directory, and $2 is a committish to set the repository to.
# Non-branch committishes are not supported yet for hg projects.
clean_update_and_set_repository_to_committish ()
{
	if [ -n "$PRESERVE_REPOSITORY" ]; then
		stderr "Not cleaning, updating, or changing branches for repo '$1'"
		return
	fi

	cd "$1"
	stderr "Cleaning and updating repo '$1', using committish '$2'"
	if [ "$VCS" = "hg" ]; then
		hg revert -a
		hg pull
		hg update -C $2
		hg purge --all
	else
		git clean -fdx
		git reset --hard HEAD
		git fetch
		git checkout $2
		git submodule update
	fi
}

stderr "Updating sources"

repo_base_dir=$PACKAGING_ROOT/$MAIN_PACKAGE_NAME
pbuilder_path="$HOME/pbuilder"

mkdir -p $repo_base_dir
cd $repo_base_dir

if [ "$MAIN_PACKAGE_NAME" = "xulrunner-geckofx29" ]; then
	if [ ! -d xulrunner-geckofx29 ]; then
		gbp-clone --pristine-tar git://gerrit.lsdev.sil.org/xulrunner-geckofx29.git
	fi

	debian_path=$repo_base_dir/xulrunner-geckofx29/debian
	repository_directory_list=(xulrunner-geckofx29)
	VCS="git"
elif [ "$MAIN_PACKAGE_NAME" = "flexbridge" ]; then
	if [ ! -d flexbridge ]; then
		git clone https://github.com/sillsdev/flexbridge.git
	fi

	debian_path=$repo_base_dir/flexbridge/debian
	repository_directory_list=(flexbridge)
	VCS="git"
elif [ "$MAIN_PACKAGE_NAME" = "flexbridgehg" ]; then
	# Older (2013) repository.
	if [ ! -d fwbridge ]; then
		hg clone http://hg.palaso.org/fwbridge
	fi

	debian_path=$repo_base_dir/fwbridge/debian
	repository_directory_list=(fwbridge)
	VCS="hg"
elif [ "$MAIN_PACKAGE_NAME" = "fieldworks-enc-converters" ]; then
	if [ ! -d ec-main ]; then
		hg clone http://hg.palaso.org/ec-main
	fi

	debian_path=$repo_base_dir/ec-main/debian
	repository_directory_list=(ec-main)
	VCS="hg"
elif [ "$MAIN_PACKAGE_NAME" = "fieldworks" ]; then
	if [ ! -d fwrepo ]; then
		stderr "Initial clone of fwrepo"
		git clone http://github.com/sillsdev/fwmeta.git fwrepo
	fi

	fwrepodir="$repo_base_dir"/fwrepo

	if [ ! -d "$fwrepodir"/fw ]; then
		stderr "Initial clone of some repositories"
		repos="FieldWorks libcom FwLocalizations FwHelps"
		branches="master develop"
		cd "$fwrepodir"
		echo -e "$repos\n$branches\n" | fwmeta/initrepo

		git clone http://github.com/sillsdev/FwDebian.git debian
	fi

	cd "$fwrepodir"

	debian_path=$fwrepodir/debian
	repository_directory_list=(fwrepo/fw fwrepo/fw/Localizations fwrepo/fw/DistFiles/Helps fwrepo/libcom fwrepo/debian)
	VCS="git"
elif [ "$MAIN_PACKAGE_NAME" = "mono-sil" -o \
	"$MAIN_PACKAGE_NAME" = "libgdiplus-sil" -o \
	"$MAIN_PACKAGE_NAME" = "gtk-sharp2-sil" -o \
	"$MAIN_PACKAGE_NAME" = "mono-basic-sil" -o \
	"$MAIN_PACKAGE_NAME" = "mono4-sil" -o \
	"$MAIN_PACKAGE_NAME" = "libgdiplus4-sil" -o \
	"$MAIN_PACKAGE_NAME" = "gtk-sharp4-sil" -o \
	"$MAIN_PACKAGE_NAME" = "mono-basic4-sil" ]; then
	short_mono_package_name=${MAIN_PACKAGE_NAME%-sil}
	# Strip the '4' from the end
	short_mono_package_name=${short_mono_package_name%4}
	# And without the '2' at the end of 'gtk-sharp2'
	short_mono_package_name=${short_mono_package_name%2}
	if [ ! -d mono-calgary ]; then
		git clone https://github.com/sillsdev/mono-calgary
	fi
	if [ ! -d $short_mono_package_name ]; then
		git clone https://github.com/sillsdev/$short_mono_package_name
	fi

	# Note that the mono source package will be created from $repo_base_dir/mono-calgary/$short_mono_package_name/source.git, not from $repo_base_dir/$short_mono_package_name. However, the $repo_base_dir/$short_mono_package_name serves the following purposes:
	#  * It is used as the reference repo when cloning source.git.
	#  * It is used to determine the hash of the requested committish for debian/changelog, before the source.git repository is even first cloned.
	#  * Having it in the repository_directory_list is a convenient way to:
	#     * receive and process the requested committish from commandline, and
	#     * print the hash to output of the committish requested.

	debian_path=$repo_base_dir/mono-calgary/$short_mono_package_name/debian
	repository_directory_list=(mono-calgary $short_mono_package_name)
else
	stderr "Unsupported package name specified: $MAIN_PACKAGE_NAME"
	exit 5
fi

# Use repository committishes requested in commandline, if available.

function EscapeString() {
	local tmp
	tmp="${1//\//_slash}"
	tmp="${tmp//-/_hyphen}"
	tmp="${tmp// /_space}"

	echo "$tmp"
}

function UnescapeString() {
	local tmp
	tmp="$(eval echo $1)"
	tmp="${tmp//_slash//}"
	tmp="${tmp//_hyphen/-}"

	echo "$tmp"
}

# Set repositorydir=committish mappings.
OLDIFS="$IFS"
IFS=,; for repo_branch_setting in ${repository_committishes_arg}; do
	repo_branch_setting="$(EscapeString "$repo_branch_setting")"
	eval $repo_branch_setting
done
IFS="$OLDIFS"

if [ "$VCS" = "hg" ]; then
	default_repository_branch=default
else
	default_repository_branch=origin/develop
fi

for dir in "${repository_directory_list[@]}"; do
	escaped_dir="$(EscapeString $dir)"
	dir_branch_requested="$(UnescapeString "\$${escaped_dir}")"
	clean_update_and_set_repository_to_committish "$repo_base_dir/$dir" ${dir_branch_requested:-$default_repository_branch}
done

if [ -n "$short_mono_package_name" ]; then
	MONO_COMMITTISH_TO_USE="$(UnescapeString ${!short_mono_package_name:-origin/develop})"
fi

stderr "Preparing"

if [ "$MAIN_PACKAGE_NAME" = "fieldworks-enc-converters" ]; then
	mv $repo_base_dir/ec-main/debian $repo_base_dir/ec-main/debian-aside
	mv $repo_base_dir/ec-main/debian-fieldworks $repo_base_dir/ec-main/debian
fi

# Clean out old source packages
cd "$debian_path"/..
source_package_name=$(dpkg-parsechangelog |grep ^Source:|cut -d' ' -f2)
rm -f "$repo_base_dir"/${source_package_name}_*.{dsc,build,changes,tar.gz}

# Optionally omit binary packages from build
for package in $OMIT_BINARY_PACKAGES_LIST; do
	stderr "Omitting binary package: $package"
	cd "$debian_path"
	# Remove binary package section from control file
	sed -i control -e "/^Package: $package$/,/^$/d"
done

# Don't try to process 32-bit package products if they are all architectureless.
grep "^Architecture: " "$debian_path"/control|grep -q -v "Architecture: all$" || {
	stderr "All binary packages are listed as 'all' architecture. Resetting --arches to 'amd64'."
	ARCHES_TO_PACKAGE="amd64"
}

# Add entry to debian/changelog

if [ "$MAIN_PACKAGE_NAME" = "fieldworks" ]; then
	masterversioninfo="$repo_base_dir/fwrepo/fw/Src/MasterVersionInfo.txt"
	major=$(sed -n 's/FWMAJOR=//p' $masterversioninfo)
	code_version="${major:-0}"
	minor=$(sed -n 's/FWMINOR=//p' $masterversioninfo)
	code_version+=".${minor:-0}"
	revision=$(sed -n 's/FWREVISION=//p' $masterversioninfo)
	code_version+=".${revision:-0}"
	beta_version=$(sed -n 's/FWBETAVERSION=//p' $masterversioninfo)
	if [ -n "$beta_version" ]; then
		code_version+="~${beta_version}"
	fi
	# Change code_version to lowercase and strip any spaces
	code_version="${code_version,,}"
	code_version=${code_version// /}
	fw_repo_version=$code_version
	nightlydelimeter="~"
fi

# Set Debian/changelog environment
: ${DEBFULLNAME:='FieldWorks Packages Signing Key'}

cd "$debian_path"/..

timestamp=$(date +"%Y%m%d.%H%M%S")
latest_version_in_debian_changelog=$(dpkg-parsechangelog |grep ^Version:|cut -d' ' -f2)
base_version=${fw_repo_version:-$latest_version_in_debian_changelog}
nightlydelimeter=${nightlydelimeter:-"."}
if [ "$VCS" = "hg" ]; then
	hash_of_current_commit=$(hg id -i 2>/dev/null |cut -c -12)
else
	hash_of_current_commit=$(git rev-parse --short HEAD)
fi
if [ "$MAIN_PACKAGE_NAME" = "fieldworks" ]; then
	# Go to the right place for the FW commitish.
	cd "$fwrepodir/fw"
	hash_of_current_commit=$(git rev-parse --short HEAD)
	cd -
fi
if [ -n "$short_mono_package_name" ]; then
	# The mono source repository is not only in a special place, and with its HEAD not necessarily pointing to the right thing to build, but it isn't necessarily even downloaded yet at this point. Use the $repo_base_dir/$short_mono_package_name repo to derive the hash.
	cd "$repo_base_dir/$short_mono_package_name"
	hash_of_current_commit=$(git rev-parse --short $MONO_COMMITTISH_TO_USE)
	cd -
fi
ci_build_number=${BUILD_NUMBER:-0}
nightlyversion="$base_version${nightlydelimeter}nightly$timestamp.$ci_build_number.$hash_of_current_commit$package_version_extension"
if [[ -n $automated_version_extension_arg ]]; then
	automated_version_extension_arg=$(perl -p -e "s/{BUILD_NUMBER}/${ci_build_number}/g" <(echo $automated_version_extension_arg))
	automated_version_extension_arg=$(perl -p -e "s/{COMMIT_HASH}/${hash_of_current_commit}/g" <(echo $automated_version_extension_arg))
	nightlyversion="$base_version$automated_version_extension_arg$package_version_extension"
fi
distribution_of_last_change=$(dpkg-parsechangelog |grep ^Distribution:|cut -d' ' -f2)
changelog_message="Built from commit $hash_of_current_commit"
if [ -n "$most_recent_tag" ]; then
	changelog_message="See git log $most_recent_tag..$hash_of_current_commit"
fi
if [ -z "$PRESERVE_CHANGELOG" ]; then
	stderr "Using package version: $nightlyversion"
	dch --distribution $distribution_of_last_change --force-distribution --upstream --newversion "$nightlyversion" --force-bad-version "$changelog_message"
else
	stderr "Using package version: $latest_version_in_debian_changelog"
fi

if [ "$MAIN_PACKAGE_NAME" = "fieldworks-enc-converters" ]; then
	mv $repo_base_dir/ec-main/debian $repo_base_dir/ec-main/debian-fieldworks
	mv $repo_base_dir/ec-main/debian-aside $repo_base_dir/ec-main/debian
fi

stderr "Building source package(s) using sources from the following repository commits (possibly with local modifications):"

for repo in "${repository_directory_list[@]}"; do
	(cd "$repo_base_dir/$repo"
	if [ "$VCS" = "hg" ]; then
		name=$(hg paths|head -n1|sed -e 's#.*/##')
		commit=$(hg id -i 2>/dev/null |cut -c -12)
		echo "    $name $commit"
	else
		name=$(git remote -v |grep fetch|head -n1 |awk '{print $2}'|sed 's#.*/##')
		commit=$(git rev-parse --short HEAD)
		echo "    $name $commit"
		git diff --quiet && echo "        Clean repository. No uncommitted changes." || { echo "        Dirty repository with the following uncommitted changes:"; git diff ; }
	fi
	)
done

if [ -n "$short_mono_package_name" ]; then
	# Build using its own source preparation script, and put the results in the right place.
	stderr "Building source package for $short_mono_package_name with own source preparation script"
	cd "$repo_base_dir/mono-calgary"
	DEBUILD_ADDITIONAL_OPTS="-uc -us" REFREPODIR="$repo_base_dir" ./make-source-package ${short_mono_package_name} ${MONO_COMMITTISH_TO_USE}
	mv ${MAIN_PACKAGE_NAME}*.{dsc,build,changes,tar.gz} "$repo_base_dir/"
elif [ "$MAIN_PACKAGE_NAME" = "fieldworks-enc-converters" ]; then
	stderr "Building source package for $MAIN_PACKAGE_NAME with own source preparation script"
	cd "$debian_path"/..
	./BuildFWSourcePackage.sh
elif [ "$MAIN_PACKAGE_NAME" = "xulrunner-geckofx29" ]; then
	stderr "Building source package for $MAIN_PACKAGE_NAME with gbp"
	cd "$debian_path"/..
	git-buildpackage --git-pristine-tar -uc -us -nc -S --git-ignore-new
elif [ "$MAIN_PACKAGE_NAME" = "flexbridge" ]; then
	stderr "Building source package for $MAIN_PACKAGE_NAME with own source preparation script"
	cd "$debian_path"/..
	./make-source-package.sh
else
	stderr "Building source package with debuild"
	cd "$debian_path"/..
	debuild -uc -us -S -nc
fi

stderr "Source package files exist with the following sha256sums:"
cd "$repo_base_dir"
if [ -n "$PRESERVE_CHANGELOG" ]; then
	full_package_name=${source_package_name}_${latest_version_in_debian_changelog}
	package_debs=${source_package_name}*_${latest_version_in_debian_changelog}
else
	full_package_name=${source_package_name}_${nightlyversion}
	package_debs=${source_package_name}*_${nightlyversion}
fi
sha256sum ${full_package_name}*.{dsc,build,changes,tar.gz}

if [ -n "$preserve_products_arg" ]; then
	stderr "Preserving source package files."
	mkdir -p "$PRODUCTS_PRESERVATION_PATH"
	cp -a "$repo_base_dir"/${full_package_name}*.{dsc,build,changes,tar.gz} "$PRODUCTS_PRESERVATION_PATH"/
	cp -a "$repo_base_dir"/${source_package_name}*.orig.tar.gz "$PRODUCTS_PRESERVATION_PATH"/
fi

if [ -n "$ARTIFACT_RESULTS_PATH" ]; then
	cp -a "$repo_base_dir"/${full_package_name}*.{dsc,build,changes,tar.gz} "$ARTIFACT_RESULTS_PATH"/
	cp -a "$repo_base_dir"/${source_package_name}*.orig.tar.gz "$ARTIFACT_RESULTS_PATH"/
fi

stderr "Building binary package(s)"

mkdir -p "$pbuilder_path"

# Make sure base.tgz is in place for any distributions being used.
for distribution in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		if [ ! -e "$pbuilder_path"/$distribution/$arch/base.tgz ]; then
			PBUILDERDIR="$pbuilder_path" DISTRIBUTIONS="$distribution" ARCHES="$arch" $SCRIPTDIR/pbuilder/setup.sh
		fi
	done
done

cd "$repo_base_dir"
packagedsc="${full_package_name}.dsc"
sudo HOME=~ PBUILDERDIR="$pbuilder_path" HOOKDIR="$SCRIPTDIR/pbuilder/hooks" http_proxy="$http_proxy" no_proxy="$no_proxy" DISTRIBUTIONS="$DISTRIBUTIONS_TO_PACKAGE" ARCHES="$ARCHES_TO_PACKAGE" $SCRIPTDIR/pbuilder/build-multi.sh "$packagedsc"

stderr "Signing package(s)"

cd "$pbuilder_path"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $pbuilder_path/$dist/$arch/result
		if [ $(find . -name ${full_package_name}+\*.changes | wc -l) -gt 0 ]; then
			sed -i '10d' ${full_package_name}+*.changes

			# .changes files can have their Distribution set to UNRELEASED sometimes. Fix it.
			perl -pi -e "s/UNRELEASED/$dist/" ${full_package_name}+*.changes

			[ -z "$debkeyid" ] && stderr "Warning: debkeyid not set."
			debsign -k$debkeyid --no-re-sign ${full_package_name}+*.changes
		fi
	done
done

stderr "Binary package files exist with the following sha256sums:"

for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $pbuilder_path/$dist/$arch/result
		sha256sum ${full_package_name}+*.changes ${package_debs}+*.deb || true
		if [ -n "$preserve_products_arg" ]; then
			mkdir -p "$PRODUCTS_PRESERVATION_PATH"
			cp -a ${full_package_name}+*.changes ${package_debs}+*.deb "$PRODUCTS_PRESERVATION_PATH"/
		fi
		[ -n "$ARTIFACT_RESULTS_PATH" ] && cp -a ${full_package_name}+*.changes ${package_debs}+*.deb "$ARTIFACT_RESULTS_PATH"/
	done
done
[ -n "$preserve_products_arg" ] && stderr "Preserved binary package files."

stderr "Results:"

any_failures=false
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		RESULT="$pbuilder_path/$dist/$arch/result/${full_package_name}_${arch}.status"
		echo $RESULT:
		cat $RESULT
		grep -q '^0$' $RESULT || any_failures=true
	done
done

if [ "$any_failures" = "true" ]; then
	stderr "One or more failures detected. Not uploading any packages."
	exit 100
fi

stderr "Uploading package(s)"

cd "$pbuilder_path"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $pbuilder_path/$dist/$arch/result
		if [ $(find . -name ${full_package_name}+\*.changes | wc -l) -gt 0 ]; then
			if [[ "wheezy jessie stretch" == *$dist* ]]; then
				DISTFAMILY=debian
			else
				DISTFAMILY=ubuntu
			fi
			# Send the experimental packages to a suite to simplify simultaneous development of packages
			destination_repository="$DISTFAMILY/$dist-${suite_name:-experimental}"
			# Send the no-longer experimental packages to llso-main (no suite needed)
			if [ "$destination_repository_arg" = "llso-main" -o "$suite_name" = "main" ]; then
				destination_repository="$DISTFAMILY/$dist"
			elif [ "$DISTFAMILY" = "debian" ]; then
				# for debian we don't have different repos
				destination_repository="$DISTFAMILY/$dist"
			fi
			stderr "Uploading to llso:$destination_repository $arch"
			dput $dput_simulate -U llso:$destination_repository ${full_package_name}+*.changes
		fi
	done
done

exit 0
